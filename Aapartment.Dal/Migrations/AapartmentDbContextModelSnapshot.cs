// <auto-generated />
using System;
using Aapartment.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aapartment.Dal.Migrations
{
    [DbContext(typeof(AapartmentDbContext))]
    partial class AapartmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aapartment.Dal.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pretend you are lost in a magical forest as you perch on a log or curl up in the swinging chair. Soak in the tub, then fall asleep in a heavenly bedroom with cloud-painted walls and twinkling lights. And when you wake up, the espresso machine awaits.",
                            ImageName = "alap1.jpg",
                            Name = "Panama Hotel"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Unwind at this stunning French Provencal beachside cottage. The house was lovingly built with stone floors, high-beamed ceilings, and antique details for a luxurious yet charming feel. Enjoy the sea and mountain views from the pool and lush garden. The house is located in the enclave of Llandudno Beach, a locals-only spot with unspoilt, fine white sand and curling surfing waves. Although shops and restaurants are only a five-minute drive away, the area feels peaceful and secluded.",
                            ImageName = "alap2.jpg",
                            Name = "Mercur Hotel"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Take an early morning stroll and enjoy the Trevi Fountain without the tourists. Wander around the historic streets while the city sleeps, then head back for a morning coffee at this urban-chic studio with a suspended loft bedroom.",
                            ImageName = "alap3.jpg",
                            Name = "Langmoon Hotel"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Take an early morning stroll and enjoy the Trevi Fountain without the tourists. Wander around the historic streets while the city sleeps, then head back for a morning coffee at this urban-chic studio with a suspended loft bedroom.",
                            ImageName = "alap4.jpg",
                            Name = "Malaha Hotel"
                        });
                });

            modelBuilder.Entity("Aapartment.Dal.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SumPrice")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2021, 5, 14, 16, 2, 43, 933, DateTimeKind.Local).AddTicks(9018),
                            IsPaid = true,
                            NumberOfAdults = 3,
                            NumberOfChildren = 2,
                            RoomId = 2,
                            StartDate = new DateTime(2021, 5, 6, 16, 2, 43, 931, DateTimeKind.Local).AddTicks(7665),
                            SumPrice = 160300,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2021, 5, 12, 16, 2, 43, 934, DateTimeKind.Local).AddTicks(942),
                            IsPaid = false,
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            RoomId = 5,
                            StartDate = new DateTime(2021, 5, 7, 16, 2, 43, 934, DateTimeKind.Local).AddTicks(924),
                            SumPrice = 260300,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2021, 5, 24, 16, 2, 43, 934, DateTimeKind.Local).AddTicks(989),
                            IsPaid = true,
                            NumberOfAdults = 1,
                            NumberOfChildren = 0,
                            RoomId = 10,
                            StartDate = new DateTime(2021, 5, 17, 16, 2, 43, 934, DateTimeKind.Local).AddTicks(986),
                            SumPrice = 212330,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Aapartment.Dal.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentId = 1,
                            Content = "One of the best apartment here.",
                            Created = new DateTime(2021, 5, 2, 16, 2, 43, 934, DateTimeKind.Local).AddTicks(4734),
                            Stars = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ApartmentId = 2,
                            Content = "There are a lot of bugs here!",
                            Created = new DateTime(2021, 5, 2, 16, 2, 43, 934, DateTimeKind.Local).AddTicks(5563),
                            Stars = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            ApartmentId = 3,
                            Content = "I could find a better place, but it's ok.",
                            Created = new DateTime(2021, 5, 2, 16, 2, 43, 934, DateTimeKind.Local).AddTicks(5587),
                            Stars = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Aapartment.Dal.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailabe")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfPeople")
                        .HasColumnType("int");

                    b.Property<int>("PricePerAdult")
                        .HasColumnType("int");

                    b.Property<int>("PricePerChild")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentId = 1,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 5000,
                            PricePerChild = 2400,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = 2,
                            ApartmentId = 1,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 3,
                            PricePerAdult = 5500,
                            PricePerChild = 2450,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = 3,
                            ApartmentId = 1,
                            IsAvailabe = false,
                            MaxNumberOfPeople = 7,
                            PricePerAdult = 5400,
                            PricePerChild = 2000,
                            RoomNumber = 103
                        },
                        new
                        {
                            Id = 4,
                            ApartmentId = 1,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 6000,
                            PricePerChild = 3400,
                            RoomNumber = 104
                        },
                        new
                        {
                            Id = 5,
                            ApartmentId = 1,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 5050,
                            PricePerChild = 2700,
                            RoomNumber = 105
                        },
                        new
                        {
                            Id = 6,
                            ApartmentId = 2,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 5000,
                            PricePerChild = 2400,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = 7,
                            ApartmentId = 2,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 3,
                            PricePerAdult = 5500,
                            PricePerChild = 2450,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = 8,
                            ApartmentId = 2,
                            IsAvailabe = false,
                            MaxNumberOfPeople = 7,
                            PricePerAdult = 5400,
                            PricePerChild = 2000,
                            RoomNumber = 103
                        },
                        new
                        {
                            Id = 9,
                            ApartmentId = 2,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 6000,
                            PricePerChild = 3400,
                            RoomNumber = 104
                        },
                        new
                        {
                            Id = 10,
                            ApartmentId = 2,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 5050,
                            PricePerChild = 2700,
                            RoomNumber = 105
                        },
                        new
                        {
                            Id = 11,
                            ApartmentId = 3,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 5000,
                            PricePerChild = 2400,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = 12,
                            ApartmentId = 3,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 3,
                            PricePerAdult = 5500,
                            PricePerChild = 2450,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = 13,
                            ApartmentId = 3,
                            IsAvailabe = false,
                            MaxNumberOfPeople = 7,
                            PricePerAdult = 5400,
                            PricePerChild = 2000,
                            RoomNumber = 103
                        },
                        new
                        {
                            Id = 14,
                            ApartmentId = 3,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 6000,
                            PricePerChild = 3400,
                            RoomNumber = 104
                        },
                        new
                        {
                            Id = 15,
                            ApartmentId = 3,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 5050,
                            PricePerChild = 2700,
                            RoomNumber = 105
                        },
                        new
                        {
                            Id = 16,
                            ApartmentId = 4,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 5000,
                            PricePerChild = 2400,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = 17,
                            ApartmentId = 4,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 3,
                            PricePerAdult = 5500,
                            PricePerChild = 2450,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = 18,
                            ApartmentId = 4,
                            IsAvailabe = false,
                            MaxNumberOfPeople = 7,
                            PricePerAdult = 5400,
                            PricePerChild = 2000,
                            RoomNumber = 103
                        },
                        new
                        {
                            Id = 19,
                            ApartmentId = 4,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 6000,
                            PricePerChild = 3400,
                            RoomNumber = 104
                        },
                        new
                        {
                            Id = 20,
                            ApartmentId = 4,
                            IsAvailabe = true,
                            MaxNumberOfPeople = 4,
                            PricePerAdult = 5050,
                            PricePerChild = 2700,
                            RoomNumber = 105
                        });
                });

            modelBuilder.Entity("Aapartment.Dal.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06949b32-2795-4898-9d94-ffea2ab7cd40",
                            Email = "bbotond25@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Botond",
                            LastName = "Barta",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMsPWENyxbGqK+PMv0F8Uv8/llEInzFl7oWMQAYeFYE73P5FPn9gMJGX0Q47dL1bbw==",
                            PhoneNumber = "06/30-152-5123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "baaart"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d771ca90-faa8-4764-b911-c439944d3948",
                            Email = "hmate@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Herczku",
                            LastName = "Máté",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMsPWENyxbGqK+PMv0F8Uv8/llEInzFl7oWMQAYeFYE73P5FPn9gMJGX0Q47dL1bbw==",
                            PhoneNumber = "06/30-152-5123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "herczkum"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fb5fb53-7f3a-4852-8986-dfced3a77faa",
                            Email = "kbela@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kis",
                            LastName = "Béla",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMsPWENyxbGqK+PMv0F8Uv8/llEInzFl7oWMQAYeFYE73P5FPn9gMJGX0Q47dL1bbw==",
                            PhoneNumber = "06/30-152-5123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kbela"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "d4cc6f7a-62e5-47af-ad07-6865a86a5d0c",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "c4dd6d60-5986-4a00-a2b3-862c50402178",
                            Name = "GUEST",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Aapartment.Dal.Entities.Apartment", b =>
                {
                    b.OwnsOne("Aapartment.Dal.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int?>("ApartmentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ZipCode")
                                .HasColumnType("int");

                            b1.HasKey("ApartmentId");

                            b1.ToTable("Apartments");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId");

                            b1.HasData(
                                new
                                {
                                    ApartmentId = 4,
                                    City = "Honolulu",
                                    Country = "USA",
                                    Street = "Upalu St street 3",
                                    ZipCode = 96705
                                },
                                new
                                {
                                    ApartmentId = 3,
                                    City = "Peking",
                                    Country = "China",
                                    Street = "Chicaego street 45",
                                    ZipCode = 11004
                                },
                                new
                                {
                                    ApartmentId = 2,
                                    City = "Madrid",
                                    Country = "Spain",
                                    Street = "Bueno street 45",
                                    ZipCode = 3424
                                },
                                new
                                {
                                    ApartmentId = 1,
                                    City = "New York",
                                    Country = "USA",
                                    Street = "Pearl street 72",
                                    ZipCode = 5504
                                });
                        });

                    b.OwnsMany("Aapartment.Dal.Entities.Service", "Services", b1 =>
                        {
                            b1.Property<int?>("ApartmentId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Icon")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApartmentId", "Id");

                            b1.ToTable("Service");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId");

                            b1.HasData(
                                new
                                {
                                    ApartmentId = 1,
                                    Id = 1,
                                    Icon = "fas fa-wifi",
                                    Name = "Free wifi"
                                },
                                new
                                {
                                    ApartmentId = 1,
                                    Id = 2,
                                    Icon = "fas fa-paw",
                                    Name = "Pets allowed"
                                },
                                new
                                {
                                    ApartmentId = 1,
                                    Id = 3,
                                    Icon = "fas fa-shuttle-van",
                                    Name = "Airport shuttle"
                                },
                                new
                                {
                                    ApartmentId = 1,
                                    Id = 4,
                                    Icon = "fas fa-smoking-ban",
                                    Name = "Non-smoking rooms"
                                },
                                new
                                {
                                    ApartmentId = 1,
                                    Id = 5,
                                    Icon = "fas fa-users",
                                    Name = "Family rooms"
                                },
                                new
                                {
                                    ApartmentId = 1,
                                    Id = 6,
                                    Icon = "fas fa-umbrella-beach",
                                    Name = "Terrace"
                                },
                                new
                                {
                                    ApartmentId = 2,
                                    Id = 7,
                                    Icon = "fas fa-wifi",
                                    Name = "Free wifi"
                                },
                                new
                                {
                                    ApartmentId = 2,
                                    Id = 8,
                                    Icon = "fas fa-paw",
                                    Name = "Pets allowed"
                                },
                                new
                                {
                                    ApartmentId = 2,
                                    Id = 9,
                                    Icon = "fas fa-shuttle-van",
                                    Name = "Airport shuttle"
                                },
                                new
                                {
                                    ApartmentId = 2,
                                    Id = 10,
                                    Icon = "fas fa-smoking-ban",
                                    Name = "Non-smoking rooms"
                                },
                                new
                                {
                                    ApartmentId = 2,
                                    Id = 11,
                                    Icon = "fas fa-users",
                                    Name = "Family rooms"
                                },
                                new
                                {
                                    ApartmentId = 2,
                                    Id = 12,
                                    Icon = "fas fa-umbrella-beach",
                                    Name = "Terrace"
                                },
                                new
                                {
                                    ApartmentId = 3,
                                    Id = 13,
                                    Icon = "fas fa-wifi",
                                    Name = "Free wifi"
                                },
                                new
                                {
                                    ApartmentId = 3,
                                    Id = 14,
                                    Icon = "fas fa-paw",
                                    Name = "Pets allowed"
                                },
                                new
                                {
                                    ApartmentId = 3,
                                    Id = 15,
                                    Icon = "fas fa-shuttle-van",
                                    Name = "Airport shuttle"
                                },
                                new
                                {
                                    ApartmentId = 3,
                                    Id = 16,
                                    Icon = "fas fa-smoking-ban",
                                    Name = "Non-smoking rooms"
                                },
                                new
                                {
                                    ApartmentId = 3,
                                    Id = 17,
                                    Icon = "fas fa-users",
                                    Name = "Family rooms"
                                },
                                new
                                {
                                    ApartmentId = 3,
                                    Id = 18,
                                    Icon = "fas fa-umbrella-beach",
                                    Name = "Terrace"
                                });
                        });
                });

            modelBuilder.Entity("Aapartment.Dal.Entities.Booking", b =>
                {
                    b.HasOne("Aapartment.Dal.Entities.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Rooms_Bookings");

                    b.HasOne("Aapartment.Dal.Entities.User", null)
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Bookings");

                    b.HasOne("Aapartment.Dal.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Aapartment.Dal.Entities.Review", b =>
                {
                    b.HasOne("Aapartment.Dal.Entities.Apartment", "Apartment")
                        .WithMany("Reviews")
                        .HasForeignKey("ApartmentId")
                        .HasConstraintName("FK_Reviews_Apartments");

                    b.HasOne("Aapartment.Dal.Entities.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Reviews");

                    b.HasOne("Aapartment.Dal.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Aapartment.Dal.Entities.Room", b =>
                {
                    b.HasOne("Aapartment.Dal.Entities.Apartment", "Apartment")
                        .WithMany("Rooms")
                        .HasForeignKey("ApartmentId")
                        .HasConstraintName("FK_Rooms_Apartments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Aapartment.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Aapartment.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aapartment.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Aapartment.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
